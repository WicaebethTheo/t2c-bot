from redbot.core import commands
import discord
from discord.ui import Button, View
import asyncio

class AcceptButton(Button):
    def __init__(self):
        super().__init__(
            label="Accepter le r√®glement",
            style=discord.ButtonStyle.green,
            custom_id="accept_rules"
        )

    async def callback(self, interaction: discord.Interaction):
        role_id = 1352971285725970503
        role = interaction.guild.get_role(role_id)
        
        if role is None:
            await interaction.response.send_message("‚ùå Erreur: Le r√¥le n'a pas √©t√© trouv√©.", ephemeral=True)
            return
            
        if role in interaction.user.roles:
            await interaction.response.send_message("‚úÖ Tu as d√©j√† accept√© le r√®glement !", ephemeral=True)
            return
            
        await interaction.user.add_roles(role)
        await interaction.response.send_message("‚úÖ Tu as accept√© le r√®glement ! Tu as maintenant acc√®s aux salons.", ephemeral=True)

class RulesPP(commands.Cog):
    """Cog pour g√©rer le r√®glement des parties personnalis√©es"""
    
    def __init__(self, bot):
        self.bot = bot
        self.RULES_CHANNEL = 1352768727971791101

    async def cog_load(self):
        """Called when the cog is loaded"""
        pass

    @staticmethod
    def has_required_role():
        async def predicate(ctx):
            # ID de Wicaebeth
            wicaebeth_id = 257152912776495104
            # Si c'est Wicaebeth, autoriser
            if ctx.author.id == wicaebeth_id:
                return True
                
            # Sinon v√©rifier le r√¥le
            required_role_id = 974387257630933083
            role = ctx.guild.get_role(required_role_id)
            if not role:
                raise commands.CheckFailure("Le r√¥le requis n'existe pas sur ce serveur.")
            if role not in ctx.author.roles:
                raise commands.CheckFailure("Tu n'as pas le r√¥le requis pour utiliser cette commande.")
            return True
        return commands.check(predicate)

    @commands.command()
    @has_required_role()
    async def rulespp(self, ctx):
        """Cr√©e le message de r√®glement des parties personnalis√©es"""
        # Supprimer la commande
        try:
            await ctx.message.delete()
        except (discord.Forbidden, discord.NotFound):
            pass

        channel = self.bot.get_channel(self.RULES_CHANNEL)
        if not channel:
            await ctx.send("‚ùå Le salon de r√®glement n'a pas √©t√© trouv√©.")
            return

        # Nettoyer le salon en supprimant tous les messages
        await ctx.send("üßπ Nettoyage du salon de r√®glement en cours...")
        try:
            # Supprimer tous les messages du salon
            await channel.purge(limit=100)
            await ctx.send("‚úÖ Salon nettoy√© avec succ√®s.")
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas la permission de supprimer des messages dans ce salon.")
            return
        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite lors du nettoyage du salon : {str(e)}")
            return

        # Cr√©er l'embed
        embed = discord.Embed(
            title="üìú R√®glement des Parties Personnalis√©es",
            color=0x2F3136
        )

        # Pr√©paration
        embed.add_field(
            name="‚ö° Pr√©paration",
            value=(
                "‚Ä¢ Le staff g√®re le lancement, ne pas d√©ranger et passer en spectateur.\n"
                "‚Ä¢ √âquipes faites √† la main : indiquez votre peak elo dans le chat.\n"
                "‚Ä¢ Map tir√©e au sort (6 refus minimum pour relancer la roulette une fois de plus) ou choisie si tout le monde est d'accord.\n"
                "‚Ä¢ Validez le r√®glement pour acc√©der aux salons."
            ),
            inline=False
        )

        # Durant la partie
        embed.add_field(
            name="üéÆ En jeu",
            value=(
                "**Limites d'armes par √©quipe :**\n"
                "‚Ä¢ 1 Odin, 1 Judge, 1 Operator (ult Chamber exclu)\n\n"
                "‚Ä¢ Chat vocal autoris√© avant chaque manche (sans abus).\n"
                "‚Ä¢ Instalock interdit.\n"
                "‚Ä¢ Pas de trashtalk / comportements toxiques.\n"
                "‚Ä¢ Smurf interdit (ne mentez pas sur votre rang).\n"
                "‚Ä¢ Absence non justifi√©e = sanction."
            ),
            inline=False
        )

        # Objectif
        embed.add_field(
            name="üéØ Objectif",
            value=(
                "Le but des parties personnalis√©es est que les joueurs de tous niveaux, du bas elo au haut elo, puissent s'amuser.\n"
                "Toute attitude n√©gative envers un autre joueur sera sanctionn√©e."
            ),
            inline=False
        )

        # Cr√©er la vue avec le bouton
        view = View(timeout=None)
        view.add_item(AcceptButton())

        # Envoyer l'embed avec le bouton
        await channel.send(embed=embed, view=view)
        await ctx.send("‚úÖ Message de r√®glement cr√©√© avec succ√®s !")

    @rulespp.error
    async def rulespp_error(self, ctx, error):
        if isinstance(error, commands.CheckFailure):
            error_msg = await ctx.send("‚ùå Tu n'as pas le r√¥le requis pour utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except (discord.Forbidden, discord.NotFound):
                pass

async def setup(bot):
    await bot.add_cog(RulesPP(bot))
