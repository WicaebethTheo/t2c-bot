import discord
from redbot.core import commands, Config
import asyncio
from discord.ui import Button, View

class VocalControlView(discord.ui.View):
    def __init__(self, owner_id, bot, channel_id):
        super().__init__(timeout=None)
        self.owner_id = owner_id
        self.bot = bot
        self.channel_id = channel_id
        
    @discord.ui.button(label="Rendre Priv√©", style=discord.ButtonStyle.danger, emoji="üîí", custom_id="make_private")
    async def make_private(self, interaction: discord.Interaction, button: discord.ui.Button):
        # V√©rifier si c'est bien le propri√©taire du salon
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå Seul le cr√©ateur du salon peut modifier ses param√®tres.", ephemeral=True)
            return
            
        # R√©cup√©rer le salon
        channel = interaction.guild.get_channel(self.channel_id)
        if not channel:
            await interaction.response.send_message("‚ùå Ce salon n'existe plus.", ephemeral=True)
            return
            
        try:
            # Mettre √† jour les permissions pour rendre le salon priv√©
            await channel.set_permissions(interaction.guild.default_role, connect=False)
            
            # Mettre √† jour le nom du salon pour indiquer qu'il est priv√©
            current_name = channel.name
            if "üîí" not in current_name:
                await channel.edit(name=f"üîí {current_name}")
                
            await interaction.response.send_message("‚úÖ Le salon est maintenant priv√©. Seuls les membres invit√©s peuvent rejoindre.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Une erreur s'est produite: {str(e)}", ephemeral=True)
    
    @discord.ui.button(label="Rendre Public", style=discord.ButtonStyle.success, emoji="üîì", custom_id="make_public")
    async def make_public(self, interaction: discord.Interaction, button: discord.ui.Button):
        # V√©rifier si c'est bien le propri√©taire du salon
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå Seul le cr√©ateur du salon peut modifier ses param√®tres.", ephemeral=True)
            return
            
        # R√©cup√©rer le salon
        channel = interaction.guild.get_channel(self.channel_id)
        if not channel:
            await interaction.response.send_message("‚ùå Ce salon n'existe plus.", ephemeral=True)
            return
            
        try:
            # Mettre √† jour les permissions pour rendre le salon public
            await channel.set_permissions(interaction.guild.default_role, connect=True)
            
            # Mettre √† jour le nom du salon pour indiquer qu'il est public
            current_name = channel.name
            if "üîí" in current_name:
                await channel.edit(name=current_name.replace("üîí ", ""))
                
            await interaction.response.send_message("‚úÖ Le salon est maintenant public. Tout le monde peut rejoindre.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Une erreur s'est produite: {str(e)}", ephemeral=True)
    
    @discord.ui.button(label="Limite de Membres", style=discord.ButtonStyle.primary, emoji="üë•", custom_id="limit_members")
    async def limit_members(self, interaction: discord.Interaction, button: discord.ui.Button):
        # V√©rifier si c'est bien le propri√©taire du salon
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå Seul le cr√©ateur du salon peut modifier ses param√®tres.", ephemeral=True)
            return
            
        # R√©cup√©rer le salon
        channel = interaction.guild.get_channel(self.channel_id)
        if not channel:
            await interaction.response.send_message("‚ùå Ce salon n'existe plus.", ephemeral=True)
            return
            
        # Demander la limite de membres
        await interaction.response.send_message(
            "Entrez la limite de membres souhait√©e (0-99) : \n"
            "- `0` = Aucune limite\n"
            "- `5` = 5 membres maximum\n"
            "- `10` = 10 membres maximum, etc.",
            ephemeral=True
        )
        
        # Fonction pour v√©rifier si c'est le bon utilisateur et le bon canal
        def check(m):
            return m.author.id == interaction.user.id and m.channel.id == interaction.channel.id
            
        try:
            # Attendre la r√©ponse
            msg = await self.bot.wait_for('message', check=check, timeout=30.0)
            
            # V√©rifier que la r√©ponse est un nombre entre 0 et 99
            try:
                limit = int(msg.content)
                if limit < 0 or limit > 99:
                    await interaction.followup.send("‚ùå La limite doit √™tre entre 0 et 99.", ephemeral=True)
                    return
                    
                # Appliquer la limite
                await channel.edit(user_limit=limit)
                
                # Supprimer le message de r√©ponse de l'utilisateur
                try:
                    await msg.delete()
                except:
                    pass
                
                # Confirmer le changement
                if limit == 0:
                    await interaction.followup.send("‚úÖ Aucune limite de membres n'est maintenant appliqu√©e.", ephemeral=True)
                else:
                    await interaction.followup.send(f"‚úÖ La limite du salon est maintenant de {limit} membres.", ephemeral=True)
                    
            except ValueError:
                await interaction.followup.send("‚ùå Veuillez entrer un nombre valide.", ephemeral=True)
                
        except asyncio.TimeoutError:
            await interaction.followup.send("‚ùå Temps √©coul√©. Aucune limite n'a √©t√© d√©finie.", ephemeral=True)

class CreationVoc(commands.Cog):
    """Syst√®me de cr√©ation automatique de salons vocaux"""

    def __init__(self, bot):
        self.bot = bot
        self.config = Config.get_conf(self, identifier=1234567891)
        self.CREATION_CHANNEL_ID = 1352995736803086366
        self.temp_channels = {}  # Pour stocker les salons temporaires
        self.control_messages = {}  # Pour stocker les messages de contr√¥le

    @commands.Cog.listener()
    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        # Si l'utilisateur rejoint le salon de cr√©ation
        if after.channel and after.channel.id == self.CREATION_CHANNEL_ID:
            # Cr√©er un nouveau salon vocal
            category = after.channel.category
            if category:
                try:
                    # Copier les permissions existantes du salon de cr√©ation
                    overwrites = after.channel.overwrites.copy()
                    
                    # Modifier les permissions du r√¥le par d√©faut pour emp√™cher de d√©placer les membres
                    if member.guild.default_role not in overwrites:
                        overwrites[member.guild.default_role] = discord.PermissionOverwrite()
                    overwrites[member.guild.default_role].move_members = False
                    
                    # Ajouter les permissions sp√©ciales pour le cr√©ateur
                    overwrites[member] = discord.PermissionOverwrite(
                        view_channel=True,
                        connect=True,
                        speak=True,
                        stream=True,
                        priority_speaker=True,
                        mute_members=True,
                        deafen_members=True,
                        move_members=True,
                        manage_channels=True
                    )

                    # Cr√©er le salon vocal avec les m√™mes propri√©t√©s
                    new_channel = await category.create_voice_channel(
                        f"üéÆ {member.display_name}",
                        overwrites=overwrites,
                        position=after.channel.position + 1,
                        bitrate=after.channel.bitrate,
                        user_limit=after.channel.user_limit,
                        rtc_region=after.channel.rtc_region,
                        video_quality_mode=after.channel.video_quality_mode
                    )

                    # D√©placer le membre dans son nouveau salon
                    await member.move_to(new_channel)
                    
                    # Stocker le salon dans notre dictionnaire
                    self.temp_channels[new_channel.id] = member.id
                    
                    # Cr√©er un salon textuel temporaire pour les contr√¥les, visible uniquement par le cr√©ateur du salon
                    try:
                        # Cr√©er les permissions pour le salon textuel
                        text_overwrites = {
                            member.guild.default_role: discord.PermissionOverwrite(view_channel=False),
                            member: discord.PermissionOverwrite(
                                view_channel=True,
                                send_messages=True,
                                read_messages=True,
                                read_message_history=True,
                                embed_links=True,
                                attach_files=True
                            ),
                            member.guild.me: discord.PermissionOverwrite(
                                view_channel=True,
                                send_messages=True,
                                read_messages=True,
                                read_message_history=True,
                                embed_links=True,
                                manage_messages=True,
                                manage_channels=True
                            )
                        }
                        
                        # Cr√©er un salon textuel associ√© au salon vocal
                        control_channel = await category.create_text_channel(
                            name=f"contr√¥le-{member.name}",
                            topic=f"Contr√¥les pour le salon vocal de {member.display_name} - Ce salon sera supprim√© automatiquement",
                            overwrites=text_overwrites
                        )
                        
                        # Cr√©er l'embed pour les contr√¥les
                        embed = discord.Embed(
                            title="üéöÔ∏è Contr√¥les du salon vocal",
                            description=(
                                f"{member.mention}, bienvenue dans votre salon vocal personnalis√©!\n\n"
                                "Utilisez les boutons ci-dessous pour personnaliser votre salon:\n"
                                "‚Ä¢ üîí **Rendre Priv√©** - Seules les personnes invit√©es peuvent rejoindre\n"
                                "‚Ä¢ üîì **Rendre Public** - Tout le monde peut rejoindre\n"
                                "‚Ä¢ üë• **Limite de Membres** - D√©finir un nombre maximum de participants\n\n"
                                "Ce salon de contr√¥le est visible uniquement par vous et sera supprim√© automatiquement quand le salon vocal sera ferm√©."
                            ),
                            color=discord.Color.blue()
                        )
                        
                        # Cr√©er une vue avec les boutons de contr√¥le
                        view = VocalControlView(member.id, self.bot, new_channel.id)
                        
                        # Envoyer le message avec les contr√¥les dans le salon textuel
                        control_message = await control_channel.send(embed=embed, view=view)
                        
                        # Enregistrer les informations pour r√©f√©rence future
                        self.control_messages[new_channel.id] = {
                            "user_id": member.id,
                            "control_message_id": control_message.id,
                            "control_channel_id": control_channel.id
                        }
                        
                        # Envoyer un message syst√®me pour indiquer o√π sont les contr√¥les
                        try:
                            await control_channel.send(
                                f"{member.mention}, ce salon est uniquement visible par vous et contient les contr√¥les pour votre salon vocal **{new_channel.name}**.",
                                delete_after=30
                            )
                        except:
                            pass
                            
                    except Exception as e:
                        print(f"Erreur lors de la cr√©ation du salon de contr√¥le: {e}")
                        import traceback
                        traceback.print_exc()

                except discord.Forbidden:
                    # Le bot n'a pas les permissions n√©cessaires
                    pass
                except Exception as e:
                    # Une autre erreur s'est produite
                    print(f"Erreur lors de la cr√©ation du salon : {e}")
                    import traceback
                    traceback.print_exc()

        # Si l'utilisateur quitte un salon temporaire
        if before.channel and before.channel.id in self.temp_channels:
            # V√©rifier si le salon est vide
            if len(before.channel.members) == 0:
                # R√©cup√©rer le guild √† partir du salon vocal
                guild = before.channel.guild
                
                try:
                    # Supprimer d'abord le salon textuel associ√©
                    if before.channel.id in self.control_messages:
                        control_info = self.control_messages[before.channel.id]
                        
                        # R√©cup√©rer l'ID du salon textuel
                        control_channel_id = control_info.get("control_channel_id")
                        if control_channel_id:
                            control_channel = guild.get_channel(control_channel_id)
                            if control_channel:
                                try:
                                    await control_channel.delete(reason="Salon vocal associ√© ferm√©")
                                    print(f"Salon textuel de contr√¥le supprim√© pour le salon vocal {before.channel.id}")
                                except Exception as e:
                                    print(f"Erreur lors de la suppression du salon de contr√¥le: {e}")
                    
                    # Puis supprimer le salon vocal
                    print(f"Suppression du salon vocal {before.channel.name} (ID: {before.channel.id})")
                    await before.channel.delete(reason="Salon vocal vide")
                    
                    # Retirer les entr√©es de nos dictionnaires
                    if before.channel.id in self.temp_channels:
                        del self.temp_channels[before.channel.id]
                        print(f"Entr√©e supprim√©e du dictionnaire temp_channels pour l'ID {before.channel.id}")
                    
                    if before.channel.id in self.control_messages:
                        del self.control_messages[before.channel.id]
                        print(f"Entr√©e supprim√©e du dictionnaire control_messages pour l'ID {before.channel.id}")
                    
                except discord.NotFound:
                    print(f"Canal d√©j√† supprim√© : {before.channel.id}")
                    # Si le canal a d√©j√† √©t√© supprim√©, on supprime quand m√™me les entr√©es des dictionnaires
                    if before.channel.id in self.temp_channels:
                        del self.temp_channels[before.channel.id]
                    if before.channel.id in self.control_messages:
                        del self.control_messages[before.channel.id]
                
                except discord.Forbidden:
                    print(f"Permission refus√©e pour supprimer le canal : {before.channel.id}")
                
                except Exception as e:
                    print(f"Erreur lors de la suppression des salons : {e}")
                    import traceback
                    traceback.print_exc()

    @commands.command()
    @commands.admin_or_permissions(administrator=True)
    async def creationvoc(self, ctx):
        """Configure le salon de cr√©ation vocale avec un message explicatif"""
        
        # V√©rifier si le salon de cr√©ation existe
        creation_channel = ctx.guild.get_channel(self.CREATION_CHANNEL_ID)
        if not creation_channel:
            return await ctx.send(f"‚ùå Le salon de cr√©ation vocal (ID: {self.CREATION_CHANNEL_ID}) n'a pas √©t√© trouv√©.")
            
        # Chercher un salon textuel dans la m√™me cat√©gorie pour y mettre les instructions
        if creation_channel.category:
            text_channels = [c for c in creation_channel.category.channels if isinstance(c, discord.TextChannel)]
            if text_channels:
                instruction_channel = text_channels[0]
                
                # Cr√©er un embed d'instructions
                embed = discord.Embed(
                    title="üéôÔ∏è Cr√©ation de salons vocaux",
                    description=(
                        f"**Pour cr√©er votre propre salon vocal :**\n\n"
                        f"1. Rejoignez le salon **{creation_channel.name}**\n"
                        f"2. Un salon vocal personnel sera automatiquement cr√©√©\n"
                        f"3. Vous serez d√©plac√© dans ce nouveau salon\n"
                        f"4. Un salon textuel priv√© sera cr√©√© avec les contr√¥les de votre salon vocal\n\n"
                        f"En tant que cr√©ateur, vous pouvez :\n"
                        f"‚Ä¢ Rendre le salon priv√© ou public\n"
                        f"‚Ä¢ Limiter le nombre de membres\n"
                        f"‚Ä¢ G√©rer les autres membres (d√©placer, rendre muet, etc.)\n\n"
                        f"Le salon sera automatiquement supprim√© lorsqu'il sera vide."
                    ),
                    color=discord.Color.blue()
                )
                
                # Supprimer les anciens messages
                try:
                    await instruction_channel.purge(limit=10)
                except:
                    pass
                    
                # Envoyer le message d'instructions
                await instruction_channel.send(embed=embed)
                
                await ctx.send(f"‚úÖ Instructions de cr√©ation de salon vocal envoy√©es dans {instruction_channel.mention}")
            else:
                await ctx.send("‚ùå Aucun salon textuel trouv√© dans la cat√©gorie du salon de cr√©ation.")
        else:
            await ctx.send("‚ùå Le salon de cr√©ation n'est pas dans une cat√©gorie.")

    @commands.command()
    @commands.admin_or_permissions(administrator=True)
    async def nettoyer_voc(self, ctx):
        """Nettoie tous les salons vocaux temporaires vides"""
        
        nettoyage_status = await ctx.send("üßπ Recherche de salons vocaux temporaires √† nettoyer...")
        
        # Compter le nombre de salons nettoy√©s
        salons_vocaux_nettoy√©s = 0
        
        # Parcourir nos dictionnaires pour trouver des salons qui pourraient √™tre vides
        temp_ids = list(self.temp_channels.keys())  # Cr√©er une copie pour √©viter les erreurs pendant l'it√©ration
        
        for channel_id in temp_ids:
            # V√©rifier si le salon existe encore
            channel = ctx.guild.get_channel(channel_id)
            
            # Si le salon n'existe pas ou s'il est vide, le supprimer de nos dictionnaires
            if not channel or len(channel.members) == 0:
                try:
                    # Si le salon existe encore, le supprimer
                    if channel:
                        await channel.delete(reason="Nettoyage manuel des salons vocaux temporaires")
                        salons_vocaux_nettoy√©s += 1
                    
                    # Supprimer les entr√©es des dictionnaires
                    if channel_id in self.temp_channels:
                        del self.temp_channels[channel_id]
                    if channel_id in self.control_messages:
                        del self.control_messages[channel_id]
                        
                except Exception as e:
                    await ctx.send(f"‚ö†Ô∏è Erreur lors du nettoyage du salon {channel_id}: {str(e)}")
        
        # Parcourir tous les canaux du serveur √† la recherche de salons orphelins
        vocal_count = 0
        
        for channel in ctx.guild.channels:
            # Chercher les salons vocaux qui ressemblent √† nos salons temporaires mais ne sont pas dans notre dictionnaire
            if isinstance(channel, discord.VoiceChannel) and channel.name.startswith("üéÆ ") and channel.id != self.CREATION_CHANNEL_ID:
                # V√©rifier s'il n'est pas dans notre dictionnaire et s'il est vide
                if channel.id not in self.temp_channels and len(channel.members) == 0:
                    try:
                        await channel.delete(reason="Nettoyage de salon vocal orphelin")
                        vocal_count += 1
                    except:
                        pass
        
        # Mettre √† jour le message de statut
        await nettoyage_status.edit(content=(
            f"‚úÖ Nettoyage termin√© !\n"
            f"‚Ä¢ Salons vocaux g√©r√©s nettoy√©s : {salons_vocaux_nettoy√©s}\n"
            f"‚Ä¢ Salons vocaux orphelins nettoy√©s : {vocal_count}"
        ))

async def setup(bot):
    """Fonction de configuration requise par Red-Bot"""
    cog = CreationVoc(bot)
    await bot.add_cog(cog)
    return cog
