import discord
from redbot.core import commands, Config
import asyncio

class Publication(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.config = Config.get_conf(self, identifier=1234567890)
        self.config.register_global(
            publication_in_progress={}
        )
        self.authorized_id = 257152912776495104  # Votre ID

    @commands.command()
    async def publication(self, ctx):
        """Lance le processus de cr√©ation d'une publication"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        await ctx.send("Pour cr√©er une publication, utilisez la commande suivante:\n`!pubchan [ID du salon]`\nPar exemple: `!pubchan 123456789012345678`")

    @commands.command()
    async def pubchan(self, ctx, channel_id: int):
        """Sp√©cifie le salon pour la publication"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # V√©rifier si le salon existe
        channel = ctx.guild.get_channel(channel_id)
        if not channel:
            await ctx.send(f"‚ùå Salon non trouv√© avec l'ID {channel_id}.")
            return

        # Enregistrer les informations de la publication en cours
        await self.config.publication_in_progress.set({
            "author_id": ctx.author.id,
            "channel_id": channel_id,
            "guild_id": ctx.guild.id
        })

        await ctx.send(f"‚úÖ Salon s√©lectionn√© : {channel.mention}\nUtilisez maintenant `!pubtitle [Votre titre]` pour d√©finir le titre de votre annonce.")

    @commands.command()
    async def pubtitle(self, ctx, *, title: str):
        """D√©finit le titre de la publication"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # V√©rifier si une publication est en cours
        pub_data = await self.config.publication_in_progress()
        if not pub_data or pub_data.get("author_id") != ctx.author.id:
            await ctx.send("‚ùå Aucune publication en cours. Utilisez d'abord `!pubchan [ID du salon]`.")
            return

        # Mettre √† jour les donn√©es
        pub_data["title"] = title
        await self.config.publication_in_progress.set(pub_data)

        await ctx.send(f"‚úÖ Titre d√©fini : **{title}**\nUtilisez maintenant `!pubcontent [Votre contenu]` pour d√©finir le contenu de votre annonce.")

    @commands.command()
    async def pubcontent(self, ctx, *, content: str):
        """D√©finit le contenu de la publication"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # V√©rifier si une publication est en cours
        pub_data = await self.config.publication_in_progress()
        if not pub_data or pub_data.get("author_id") != ctx.author.id:
            await ctx.send("‚ùå Aucune publication en cours. Utilisez d'abord `!pubchan [ID du salon]` puis `!pubtitle [Votre titre]`.")
            return

        if "title" not in pub_data:
            await ctx.send("‚ùå Vous devez d'abord d√©finir un titre avec `!pubtitle [Votre titre]`.")
            return

        # Mettre √† jour les donn√©es
        pub_data["content"] = content
        await self.config.publication_in_progress.set(pub_data)

        # Cr√©er un aper√ßu
        embed = discord.Embed(
            title=pub_data["title"],
            description=content,
            color=0x2b2d31
        )
        embed.set_footer(text=f"Annonce pr√©par√©e par {ctx.author.name}", 
                      icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        embed.timestamp = discord.utils.utcnow()

        preview_msg = await ctx.send("üìù **Aper√ßu de votre annonce :**", embed=embed)
        await ctx.send("Pour publier cette annonce, utilisez `!pubsend`. Pour annuler, utilisez `!pubcancel`.")

    @commands.command()
    async def pubsend(self, ctx):
        """Envoie la publication dans le salon sp√©cifi√©"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # V√©rifier si une publication est pr√™te
        pub_data = await self.config.publication_in_progress()
        if not pub_data or pub_data.get("author_id") != ctx.author.id:
            await ctx.send("‚ùå Aucune publication en cours.")
            return

        if "title" not in pub_data or "content" not in pub_data:
            await ctx.send("‚ùå La publication n'est pas compl√®te. Vous devez d√©finir un titre et un contenu.")
            return

        # R√©cup√©rer le salon
        guild = self.bot.get_guild(pub_data["guild_id"])
        if not guild:
            await ctx.send("‚ùå Impossible de trouver le serveur.")
            await self.config.publication_in_progress.clear()
            return

        channel = guild.get_channel(pub_data["channel_id"])
        if not channel:
            await ctx.send("‚ùå Impossible de trouver le salon sp√©cifi√©.")
            await self.config.publication_in_progress.clear()
            return

        # Cr√©er et envoyer l'embed
        embed = discord.Embed(
            title=pub_data["title"],
            description=pub_data["content"],
            color=0x2b2d31
        )
        embed.set_footer(text=f"Annonce publi√©e par {ctx.author.name}", 
                      icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        embed.timestamp = discord.utils.utcnow()

        try:
            await channel.send(embed=embed)
            await ctx.send(f"‚úÖ L'annonce a √©t√© publi√©e avec succ√®s dans {channel.mention} !")
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas la permission d'envoyer des messages dans ce salon.")
        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite : {str(e)}")

        # R√©initialiser les donn√©es
        await self.config.publication_in_progress.clear()

    @commands.command()
    async def pubcancel(self, ctx):
        """Annule la publication en cours"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # V√©rifier si une publication est en cours
        pub_data = await self.config.publication_in_progress()
        if not pub_data or pub_data.get("author_id") != ctx.author.id:
            await ctx.send("‚ùå Aucune publication en cours √† annuler.")
            return

        # R√©initialiser les donn√©es
        await self.config.publication_in_progress.clear()
        await ctx.send("‚úÖ La publication a √©t√© annul√©e.")

    @commands.command()
    async def publist(self, ctx):
        """Affiche la liste des salons disponibles"""
        # V√©rifier si l'utilisateur est autoris√©
        if ctx.author.id != self.authorized_id:
            error_msg = await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser cette commande.")
            await asyncio.sleep(5)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # R√©cup√©rer tous les salons textuels du serveur
        channels = ctx.guild.text_channels
        
        if not channels:
            await ctx.send("‚ùå Aucun salon textuel trouv√© sur ce serveur.")
            return
        
        # Cr√©er et envoyer la liste des salons
        embed = discord.Embed(
            title="Liste des salons disponibles",
            description="Utilisez l'ID d'un salon avec la commande `!pubchan [ID]`",
            color=0x2b2d31
        )
        
        for channel in channels:
            embed.add_field(
                name=channel.name, 
                value=f"ID: {channel.id}", 
                inline=False
            )
        
        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(Publication(bot))
